import os
import random
from vk_bot import VkBot
from dotenv import load_dotenv
from datetime import datetime
from sqlalchemy import func
from db import get_session, User, add_user
import openai

load_dotenv()

openai.api_key = os.getenv("OPENAI_API_KEY")


session = get_session()
token = os.getenv('TOKEN')
group_id = os.getenv('GROUP_ID')

session = get_session()
bot = VkBot(token=token, group_id=group_id)
MAX_NICKNAME_LENGTH = 20
MIN_NICKNAME_LENGTH = 5
def profile_handler(event):
    chat_id = event.chat_id,
    user_id = event.object.message['from_id']
    user = session.query(User).filter(User.user_id == user_id).first()
    message = f'üßëüèª –ù–∏–∫: {user.username}\n'
    message += f'üÜî ID: {user.id}\n'
    message += f'üí∞ –ü–∏–≤-–∫–æ–∏–Ω–æ–≤: {user.beer_coin}\n'
    message += f'üçª –í—ã–ø–∏—Ç–æ: {round(user.liters)} –ª.\n'
    date_str = user.created_at.strftime("%Y-%m-%d")
    message += f'üóìÔ∏è –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {date_str}'
    bot.send_message(chat_id, message)


def beer_handler(event):
    chat_id = event.chat_id,
    user_id = event.object.message['from_id']
    name = bot.get_name(user_id)

    user = session.query(User).filter(User.user_id == user_id).first()

    if user is None:
        add_user(user_id, 1, name[1], name[2])
    else:

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        TIME_BETWEEN_ACTIONS  = 0.5 * 60

        now = datetime.now()

        # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—å—è–Ω–∫–∏
        time_since_last_activity = now - user.last_activity
    
        if time_since_last_activity.total_seconds() > TIME_BETWEEN_ACTIONS:

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–≥–æ –ø–∏–≤–∞
            BEER_AMOUNT_MIN = 6
            BEER_AMOUNT_MAX = 100
            plus = random.uniform(BEER_AMOUNT_MIN, BEER_AMOUNT_MAX)

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–≤-–∫–æ–∏–Ω–æ–≤
            BEER_COIN_MIN = 1
            BEER_COIN_MAX = 100
            beer_coins = random.randint(BEER_COIN_MIN, BEER_COIN_MAX)

            beer_amount_range = BEER_AMOUNT_MAX - BEER_AMOUNT_MIN
            beer_amount = BEER_AMOUNT_MIN + (user.liters / 100) * beer_amount_range
            new_random = random.uniform(BEER_AMOUNT_MIN, beer_amount)

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            user.liters += new_random
            user.beer_coin += beer_coins
            user.last_activity = datetime.now()
            session.commit()


            user_new_response = session.query(User)\
                .filter(User.user_id == user_id).first()

            drunk_all = user_new_response.liters
            message = f'[id{user_id}|{name[0]}], —Ç—ã –±–∞—Ö–Ω—É–ª {new_random}–ª. –ø–∏–≤–∞.'
            message += f'\n–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {round(drunk_all)}–ª. –ø–∏–≤–∞, '
            message += f'–∏ —Ç–µ–±–µ –≤—ã–ø–∞–ª–æ {beer_coins} –ø–∏–≤-–∫–æ–∏–Ω–æ–≤'
            bot.send_message(chat_id, message)
        else:
            remaining_time = TIME_BETWEEN_ACTIONS - time_since_last_activity.total_seconds()
            minutes, seconds = divmod(remaining_time, 60)
            total_coins = session.query(func.sum(User.beer_coin)).scalar()
            message = f'[id{user_id}|{name[0]}], –ø–æ–≤—Ç–æ—Ä–∏ —á–µ—Ä–µ–∑ '
            message += f'{round(minutes)}–º. {round(seconds)}—Å.\n\n'
            message += f'–í—ã–ø–∏—Ç–æ –≤—Å–µ–≥–æ - {round(user.liters)} –ª.\n'
            message += f'–ü–∏–≤-–∫–æ–∏–Ω–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ - {total_coins}'
            bot.send_message(chat_id, message)


def balance_handler(event):
    chat_id = event.chat_id,
    user_id = event.object.message['from_id']
    user = session.query(User).filter(User.user_id == user_id).first()
    name = bot.get_name(user_id)
    message = f'[id{user_id}|{name[0]}], '
    message += f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å  {user.beer_coin} –ø–∏–≤-–∫–æ–∏–Ω–æ–≤ '
    message += f'{round(user.liters)} –ª–∏—Ç—Ä–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ'
    bot.send_message(chat_id, message)


def top_users_handler(event):
    chat_id = event.chat_id,
    users = session.query(User).order_by(User.liters.desc()).limit(10).all()
    message = "üç∫ –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ —á–∞—Ç–∞:\n"
    for i, user in enumerate(users):
        message += f"{i+1}. [id{user.id}|{user.first_name} "
        message += f"{user.last_name}] - {round(user.liters)} –ª.\n"
    message_end_text = "–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫, –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã "
    message_end_text += "/beer\n\n"
    message_end_text += "–¢–û–ü –ª—É—á—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ - /top"
    bot.send_message(chat_id, f'{message}\n\n')


def change_nick_handler(event):
    chat_id = event.chat_id,
    message = event.object.message['text']
    new_nickname = message.split(" ", 2)[2]
    user_id = event.object.message['from_id']
    name = bot.get_name(user_id)

    if len(new_nickname) > MAX_NICKNAME_LENGTH:
            bot.send_message(chat_id, f'[id{user_id}|{name[0]}], –≤–∞—à –Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤ üòû')
    if len(new_nickname) < MIN_NICKNAME_LENGTH:
            bot.send_message(chat_id, f'[id{user_id}|{name[0]}], –≤–∞—à –Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ—Ä–æ—á–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ üòû')

    user = session.query(User).filter_by(user_id=user_id).first()
    user.username = new_nickname
    session.commit()

    # update the nick
    # name in the database
    
    bot.send_message(chat_id, f'–í–∞—à –Ω–∏–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ¬´{new_nickname}¬ª')

def bot_handler(event):
    user_id = event.object.message['from_id']
    chat_id = event.chat_id,
    message = event.object.message['text']
    
    name = bot.get_name(user_id)

    new_text = message.strip("–±–æ—Ç")
    bot.send_message(chat_id, f'[id{user_id}|{name[0]}], –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å...')
    response = openai.Completion.create(
        model="text-davinci-003",
        prompt=new_text,
        temperature=0.7,
        max_tokens=600,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0,
        stop=["\"\"\""]
        )

    text = response['choices'][0]['text']
    print(text.strip())
    bot.send_message(chat_id, f'[id{user_id}|{name[0]}], {text.strip()}')


    # update the nick
    # name in the database
    


def help_handler(event):
    chat_id = event.chat_id,
    message = f'‚ÑπÔ∏è –í—Å–µ –∫–æ–º–∞–Ω–¥—ã\n'
    message += f'–ø—Ä–æ—Ñ–∏–ª—å(/profile)\n'
    message += f'–ø–∏—Ç—å –ø–∏–≤–æ(/beer)\n'
    message += f'–±–∞–ª–∞–Ω—Å(/balance)\n'
    message += f'—Ç–æ–ø(/top)\n'
    message += f'—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞(/tstatsop)\n'
    bot.send_message(chat_id, message)

def test_lopata(event):
    user_id = event.object.message['from_id']
    name = bot.get_name(user_id)
    bot.send_message(event.chat_id, f'{name[0]} –ª–æ–ø–∞—Ç–∞ –∫–æ–ø–∞–µ—Ç —Ç—Ä–∞–≤—É')


def main():
    bot.add_command_handler('/profile', profile_handler)
    bot.add_command_handler('/beer', beer_handler)
    bot.add_command_handler('/balance', balance_handler)
    bot.add_command_handler('/top', top_users_handler)
    bot.add_command_handler('/stats', top_users_handler)
    bot.add_command_handler('/help', help_handler)
    bot.add_message_handler('–ø—Ä–æ—Ñ–∏–ª—å', profile_handler)
    bot.add_message_handler('–ø–∏—Ç—å –ø–∏–≤–æ', beer_handler)
    bot.add_message_handler('–±–∞–ª–∞–Ω—Å', balance_handler)
    bot.add_message_handler('—Ç–æ–ø', top_users_handler)
    bot.add_message_handler('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', top_users_handler)
    bot.add_message_handler('—Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫', change_nick_handler)
    bot.add_message_handler('–ø–æ–º–æ—â—å', help_handler)
    bot.add_message_handler('–±–æ—Ç', bot_handler)

    bot.start()





if __name__ == '__main__':
    main()
